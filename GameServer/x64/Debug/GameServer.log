Protocol.proto(4,1): warning G1A4DC0EC: Import Enum.proto is unused.
  #pragma once
  #include "Protocol.pb.h"
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  enum : uint16
  {
  	PKT_S_ENTERGAME = 1000,
  	PKT_C_ENTERGAME = 1001,
  	PKT_S_LEAVEGAME = 1002,
  	PKT_C_LEAVEGAME = 1003,
  	PKT_S_SPAWN = 1004,
  	PKT_C_SPAWN = 1005,
  	PKT_S_DESPAWN = 1006,
  	PKT_C_DESPAWN = 1007,
  	PKT_S_MOVE = 1008,
  	PKT_C_MOVE = 1009,
  	PKT_S_SKILL = 1010,
  	PKT_C_SKILL = 1011,
  	PKT_S_CHANGEHP = 1012,
  	PKT_C_CHANGEHP = 1013,
  	PKT_S_DIE = 1014,
  	PKT_C_DIE = 1015,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_C_ENTERGAME(PacketSessionRef& session, Protocol::C_ENTERGAME& pkt);
  bool Handle_C_LEAVEGAME(PacketSessionRef& session, Protocol::C_LEAVEGAME& pkt);
  bool Handle_C_SPAWN(PacketSessionRef& session, Protocol::C_SPAWN& pkt);
  bool Handle_C_DESPAWN(PacketSessionRef& session, Protocol::C_DESPAWN& pkt);
  bool Handle_C_MOVE(PacketSessionRef& session, Protocol::C_MOVE& pkt);
  bool Handle_C_SKILL(PacketSessionRef& session, Protocol::C_SKILL& pkt);
  bool Handle_C_CHANGEHP(PacketSessionRef& session, Protocol::C_CHANGEHP& pkt);
  bool Handle_C_DIE(PacketSessionRef& session, Protocol::C_DIE& pkt);
  
  class ClientPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_C_ENTERGAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_ENTERGAME>(Handle_C_ENTERGAME, session, buffer, len); };
  		GPacketHandler[PKT_C_LEAVEGAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_LEAVEGAME>(Handle_C_LEAVEGAME, session, buffer, len); };
  		GPacketHandler[PKT_C_SPAWN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_SPAWN>(Handle_C_SPAWN, session, buffer, len); };
  		GPacketHandler[PKT_C_DESPAWN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_DESPAWN>(Handle_C_DESPAWN, session, buffer, len); };
  		GPacketHandler[PKT_C_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_MOVE>(Handle_C_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_C_SKILL] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_SKILL>(Handle_C_SKILL, session, buffer, len); };
  		GPacketHandler[PKT_C_CHANGEHP] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_CHANGEHP>(Handle_C_CHANGEHP, session, buffer, len); };
  		GPacketHandler[PKT_C_DIE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_DIE>(Handle_C_DIE, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::S_ENTERGAME& pkt) { return MakeSendBuffer(pkt, PKT_S_ENTERGAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_LEAVEGAME& pkt) { return MakeSendBuffer(pkt, PKT_S_LEAVEGAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_SPAWN& pkt) { return MakeSendBuffer(pkt, PKT_S_SPAWN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_DESPAWN& pkt) { return MakeSendBuffer(pkt, PKT_S_DESPAWN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_S_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_SKILL& pkt) { return MakeSendBuffer(pkt, PKT_S_SKILL); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_CHANGEHP& pkt) { return MakeSendBuffer(pkt, PKT_S_CHANGEHP); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_DIE& pkt) { return MakeSendBuffer(pkt, PKT_S_DIE); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  		SendBufferRef sendBuffer = GSendBufferManager->Open(packetSize);
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		ASSERT_CRASH(pkt.SerializeToArray(&header[1], dataSize));
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  #pragma once
  #include "Protocol.pb.h"
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  enum : uint16
  {
  	PKT_S_ENTERGAME = 1000,
  	PKT_C_ENTERGAME = 1001,
  	PKT_S_LEAVEGAME = 1002,
  	PKT_C_LEAVEGAME = 1003,
  	PKT_S_SPAWN = 1004,
  	PKT_C_SPAWN = 1005,
  	PKT_S_DESPAWN = 1006,
  	PKT_C_DESPAWN = 1007,
  	PKT_S_MOVE = 1008,
  	PKT_C_MOVE = 1009,
  	PKT_S_SKILL = 1010,
  	PKT_C_SKILL = 1011,
  	PKT_S_CHANGEHP = 1012,
  	PKT_C_CHANGEHP = 1013,
  	PKT_S_DIE = 1014,
  	PKT_C_DIE = 1015,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_S_ENTERGAME(PacketSessionRef& session, Protocol::S_ENTERGAME& pkt);
  bool Handle_S_LEAVEGAME(PacketSessionRef& session, Protocol::S_LEAVEGAME& pkt);
  bool Handle_S_SPAWN(PacketSessionRef& session, Protocol::S_SPAWN& pkt);
  bool Handle_S_DESPAWN(PacketSessionRef& session, Protocol::S_DESPAWN& pkt);
  bool Handle_S_MOVE(PacketSessionRef& session, Protocol::S_MOVE& pkt);
  bool Handle_S_SKILL(PacketSessionRef& session, Protocol::S_SKILL& pkt);
  bool Handle_S_CHANGEHP(PacketSessionRef& session, Protocol::S_CHANGEHP& pkt);
  bool Handle_S_DIE(PacketSessionRef& session, Protocol::S_DIE& pkt);
  
  class ServerPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_S_ENTERGAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ENTERGAME>(Handle_S_ENTERGAME, session, buffer, len); };
  		GPacketHandler[PKT_S_LEAVEGAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LEAVEGAME>(Handle_S_LEAVEGAME, session, buffer, len); };
  		GPacketHandler[PKT_S_SPAWN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_SPAWN>(Handle_S_SPAWN, session, buffer, len); };
  		GPacketHandler[PKT_S_DESPAWN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_DESPAWN>(Handle_S_DESPAWN, session, buffer, len); };
  		GPacketHandler[PKT_S_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_MOVE>(Handle_S_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_S_SKILL] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_SKILL>(Handle_S_SKILL, session, buffer, len); };
  		GPacketHandler[PKT_S_CHANGEHP] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_CHANGEHP>(Handle_S_CHANGEHP, session, buffer, len); };
  		GPacketHandler[PKT_S_DIE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_DIE>(Handle_S_DIE, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::C_ENTERGAME& pkt) { return MakeSendBuffer(pkt, PKT_C_ENTERGAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_LEAVEGAME& pkt) { return MakeSendBuffer(pkt, PKT_C_LEAVEGAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_SPAWN& pkt) { return MakeSendBuffer(pkt, PKT_C_SPAWN); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_DESPAWN& pkt) { return MakeSendBuffer(pkt, PKT_C_DESPAWN); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_C_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_SKILL& pkt) { return MakeSendBuffer(pkt, PKT_C_SKILL); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_CHANGEHP& pkt) { return MakeSendBuffer(pkt, PKT_C_CHANGEHP); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_DIE& pkt) { return MakeSendBuffer(pkt, PKT_C_DIE); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  		SendBufferRef sendBuffer = GSendBufferManager->Open(packetSize);
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		ASSERT_CRASH(pkt.SerializeToArray(&header[1], dataSize));
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  D:Enum.pb.h
  1개 파일이 복사되었습니다.
  D:Enum.pb.cc
  1개 파일이 복사되었습니다.
  D:Struct.pb.h
  1개 파일이 복사되었습니다.
  D:Struct.pb.cc
  1개 파일이 복사되었습니다.
  D:Protocol.pb.h
  1개 파일이 복사되었습니다.
  D:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  D:ClientPacketHandler.h
  1개 파일이 복사되었습니다.
  D:Enum.pb.h
  1개 파일이 복사되었습니다.
  D:Enum.pb.cc
  1개 파일이 복사되었습니다.
  D:Struct.pb.h
  1개 파일이 복사되었습니다.
  D:Struct.pb.cc
  1개 파일이 복사되었습니다.
  D:Protocol.pb.h
  1개 파일이 복사되었습니다.
  D:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  D:ServerPacketHandler.h
  1개 파일이 복사되었습니다.
  계속하려면 아무 키나 누르십시오 . . . 
  pch.cpp
  Arrow.cpp
D:\GameProject\CPP_Project\Multigame\GameServer\Arrow.cpp(19,36): warning C4244: '=': 'ULONGLONG'에서 'long'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility(149,56): error C2664: 'FrokEngine::GameObject::GameObject(const FrokEngine::GameObject &)': 인수 1을(를) '_Ty'에서 'const FrokEngine::GameObject &'(으)로 변환할 수 없습니다.
          with
          [
              _Ty=FrokEngine::Arrow *
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility(142,1): message : 원인: '_Ty'에서 'const FrokEngine::GameObject'(으)로 변환할 수 없습니다.
          with
          [
              _Ty=FrokEngine::Arrow *
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility(142,1): message : 소스 형식을 가져올 수 있는 생성자가 없거나 생성자 오버로드 확인이 모호합니다.
D:\GameProject\CPP_Project\Multigame\GameServer\GameObject.h(106,2): message : 'FrokEngine::GameObject::GameObject' 선언을 참조하십시오.
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(2006): message : 컴파일되는 함수 템플릿 인스턴스화 'void std::_Construct_in_place<_Ty,FrokEngine::Arrow*>(_Ty &,FrokEngine::Arrow *&&) noexcept(false)'에 대한 참조를 확인하세요.
          with
          [
              _Ty=FrokEngine::GameObject
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(2725): message : 컴파일되는 함수 템플릿 인스턴스화 'std::_Ref_count_obj2<_Ty>::_Ref_count_obj2<FrokEngine::Arrow*>(FrokEngine::Arrow *&&)'에 대한 참조를 확인하세요.
          with
          [
              _Ty=FrokEngine::GameObject
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(2726): message : 컴파일되는 함수 템플릿 인스턴스화 'std::_Ref_count_obj2<_Ty>::_Ref_count_obj2<FrokEngine::Arrow*>(FrokEngine::Arrow *&&)'에 대한 참조를 확인하세요.
          with
          [
              _Ty=FrokEngine::GameObject
          ]
D:\GameProject\CPP_Project\Multigame\GameServer\Arrow.cpp(45): message : 컴파일되는 함수 템플릿 인스턴스화 'std::shared_ptr<FrokEngine::GameObject> std::make_shared<FrokEngine::GameObject,FrokEngine::Arrow*>(FrokEngine::Arrow *&&)'에 대한 참조를 확인하세요.
  GameObject.cpp
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility(149,56): error C2664: 'FrokEngine::GameObject::GameObject(const FrokEngine::GameObject &)': 인수 1을(를) '_Ty'에서 'const FrokEngine::GameObject &'(으)로 변환할 수 없습니다.
          with
          [
              _Ty=FrokEngine::GameObject *
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility(142,1): message : 원인: '_Ty'에서 'const FrokEngine::GameObject'(으)로 변환할 수 없습니다.
          with
          [
              _Ty=FrokEngine::GameObject *
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility(142,1): message : 소스 형식을 가져올 수 있는 생성자가 없거나 생성자 오버로드 확인이 모호합니다.
D:\GameProject\CPP_Project\Multigame\GameServer\GameObject.h(106,2): message : 'FrokEngine::GameObject::GameObject' 선언을 참조하십시오.
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(2006): message : 컴파일되는 함수 템플릿 인스턴스화 'void std::_Construct_in_place<_Ty,FrokEngine::GameObject*>(_Ty &,FrokEngine::GameObject *&&) noexcept(false)'에 대한 참조를 확인하세요.
          with
          [
              _Ty=FrokEngine::GameObject
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(2725): message : 컴파일되는 함수 템플릿 인스턴스화 'std::_Ref_count_obj2<_Ty>::_Ref_count_obj2<FrokEngine::GameObject*>(FrokEngine::GameObject *&&)'에 대한 참조를 확인하세요.
          with
          [
              _Ty=FrokEngine::GameObject
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(2726): message : 컴파일되는 함수 템플릿 인스턴스화 'std::_Ref_count_obj2<_Ty>::_Ref_count_obj2<FrokEngine::GameObject*>(FrokEngine::GameObject *&&)'에 대한 참조를 확인하세요.
          with
          [
              _Ty=FrokEngine::GameObject
          ]
D:\GameProject\CPP_Project\Multigame\GameServer\GameObject.cpp(71): message : 컴파일되는 함수 템플릿 인스턴스화 'std::shared_ptr<FrokEngine::GameObject> std::make_shared<FrokEngine::GameObject,FrokEngine::GameObject*>(FrokEngine::GameObject *&&)'에 대한 참조를 확인하세요.
  GameRoom.cpp
D:\GameProject\CPP_Project\Multigame\GameServer\ObjectManager.h(34,15): error C2039: 'Add': 'std::map<int,FrokEngine::Player *,std::less<int>,std::allocator<std::pair<const int,FrokEngine::Player *>>>'의 멤버가 아닙니다.
D:\GameProject\CPP_Project\Multigame\GameServer\ObjectManager.h(83): message : 'std::map<int,FrokEngine::Player *,std::less<int>,std::allocator<std::pair<const int,FrokEngine::Player *>>>' 선언을 참조하십시오.
D:\GameProject\CPP_Project\Multigame\GameServer\ObjectManager.h(23,5): message : 이 진단은 컴파일러 생성 함수 'T FrokEngine::ObjectManager::Add(void)'에서 수행되었습니다.
  GameServer.cpp
  GameSession.cpp
  GameSessionManager.cpp
  MapData.cpp
  Monster.cpp
D:\GameProject\CPP_Project\Multigame\GameServer\Monster.cpp(53,27): error C2664: 'FrokEngine::PlayerRef FrokEngine::GameRoom::FindPlayer(std::function<int (FrokEngine::GameObjectRef,bool)> &)': 인수 1을(를) 'FrokEngine::Monster::UpdateIdle::<lambda_508ec2823fc267d51ac04e674509a4ad>'에서 'std::function<int (FrokEngine::GameObjectRef,bool)> &'(으)로 변환할 수 없습니다.
D:\GameProject\CPP_Project\Multigame\GameServer\GameRoom.h(20,13): message : 'FrokEngine::GameRoom::FindPlayer' 선언을 참조하십시오.
D:\GameProject\CPP_Project\Multigame\GameServer\Monster.cpp(70,36): warning C4244: '=': 'ULONGLONG'에서 'long'(으)로 변환하면서 데이터가 손실될 수 있습니다.
D:\GameProject\CPP_Project\Multigame\GameServer\Monster.cpp(167,33): warning C4244: '=': 'ULONGLONG'에서 'long'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  Player.cpp
  Projectile.cpp
  ClientPacketHandler.cpp
  RoomManager.cpp
D:\GameProject\CPP_Project\Multigame\GameServer\RoomManager.cpp(11,2): error C2280: 'FrokEngine::GameRoom::GameRoom(const FrokEngine::GameRoom &)': 삭제된 함수를 참조하려고 합니다.
D:\GameProject\CPP_Project\Multigame\GameServer\GameRoom.h(36): message : 컴파일러에서 여기에 'FrokEngine::GameRoom::GameRoom'을(를) 생성했습니다.
D:\GameProject\CPP_Project\Multigame\GameServer\GameRoom.h(36,2): message : 'FrokEngine::GameRoom::GameRoom(const FrokEngine::GameRoom &)': 기본 클래스이(가) 삭제되거나 액세스할 수 없는 'FrokEngine::JobQueue::JobQueue(const FrokEngine::JobQueue &)' 함수를 호출하므로 함수가 암시적으로 삭제되었습니다.
  코드를 생성하고 있습니다...
